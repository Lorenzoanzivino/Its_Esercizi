üñ•Ô∏è Lezione 1: Cenni su hardware e S.O.
    1. Componenti dell'architettura di un elaboratore
        ‚ó¶ CPU (Central Processing Unit): √à composta principalmente da tre unit√†:
            ‚ñ™ ALU (Arithmetic Logic Unit): si occupa delle operazioni matematiche e logiche.
            ‚ñ™ Control Unit (CU): coordina il flusso di istruzioni e dati tra le varie componenti.
            ‚ñ™ Registri: sono piccole aree di memoria ultra-veloci situate all'interno della CPU, usate per memorizzare temporaneamente dati e istruzioni. La velocit√† della CPU √® misurata in GHz (gigahertz), che indica il numero di cicli di clock al secondo.
        ‚ó¶ RAM (Random Access Memory): Oltre ad essere volatile, la RAM √® anche dinamica (DRAM) o statica (SRAM). La DRAM √® pi√π economica ma pi√π lenta, mentre la SRAM √® pi√π veloce ma pi√π costosa. La RAM √® divisa in heap (memoria per variabili dinamiche) e stack (memoria per variabili locali).
        ‚ó¶ Memoria su disco (HDD/SSD):
            ‚ñ™ HDD: In un hard disk, i dati sono memorizzati su dischi magnetici rotanti. La velocit√† di lettura/scrittura √® limitata dal movimento fisico delle testine, ma gli HDD sono ideali per archiviazioni a lungo termine grazie al loro costo contenuto.
            ‚ñ™ SSD: Gli SSD sono basati su memoria flash NAND, quindi non hanno parti mobili, rendendoli molto pi√π veloci e resistenti agli urti. Hanno un ciclo di vita limitato in termini di scritture, ma sono sempre pi√π usati per il loro miglioramento nelle prestazioni.
    2. Sistema operativo
        ‚ó¶ Il sistema operativo fornisce un'interfaccia tra l'hardware e l'utente, gestendo l'allocazione delle risorse e la sicurezza. Ogni sistema operativo ha un kernel, che √® la parte fondamentale responsabile della gestione delle risorse hardware e dell'esecuzione dei processi. Il kernel pu√≤ essere monolitico (tutto in un unico blocco) o microkernel (separato in moduli).
    3. Comandi del sistema operativo
        ‚ó¶ ls: Visualizza il contenuto della directory corrente. L'uso di opzioni come ls -a mostra anche i file nascosti (quelli che iniziano con un punto).
        ‚ó¶ cd: Usato per navigare tra le directory. Esempio: cd .. ti porta alla directory superiore.
        ‚ó¶ touch: Crea un file vuoto o aggiorna la data di modifica di un file esistente. √à utile per creare file di log temporanei.
        ‚ó¶ mkdir: Serve per creare directory, importante per strutturare progetti o file system.
        ‚ó¶ rm: Rimuove file o directory. √à importante essere cauti con il comando, specialmente con rm -rf, che rimuove in modo ricorsivo e forzato tutte le directory e i loro contenuti.
    4. Creazione di una struttura standard di un progetto Python
        ‚ó¶ Una struttura di progetto ben definita in Python include file per il codice (solitamente una cartella src o project_name), test (cartella tests), e file di configurazione (requirements.txt, setup.py). Inoltre, √® fondamentale avere un file README.md per documentare il progetto e un file .gitignore per escludere file non necessari dal controllo versione.

üåê Lezione 7: Reti di Calcolatori ‚Äì Fondamenti e Principi
    1. Cos'√® una rete di calcolatori
        ‚ó¶ Le reti di calcolatori sono composte da due o pi√π dispositivi (computer, server, router, etc.) interconnessi che permettono la trasmissione di dati. Le reti possono essere cablate, wireless o un mix di entrambi, con la possibilit√† di essere collegate tra loro tramite modem, switch, router, o hub.
        ‚ó¶ I principali modi di trasmissione includono la trasmissione seriale (un bit alla volta) e la trasmissione parallela (pi√π bit contemporaneamente).
    2. Utilizzi delle reti
        ‚ó¶ Le reti sono essenziali per garantire la collaborazione remota, l'accesso a risorse condivise, e la comunicazione globale. Le moderne reti sono progettate per essere scalabili, permettendo la connessione di milioni di dispositivi in tutto il mondo, come nel caso delle reti sociali, delle applicazioni cloud e delle reti aziendali.
    3. Comunicazione point-to-point e broadcast
        ‚ó¶ La comunicazione point-to-point avviene tra due dispositivi con una connessione diretta (ad esempio, un collegamento tra un computer e una stampante). Questo tipo di comunicazione √® affidabile, ma non scalabile a livello di rete globale.
        ‚ó¶ La comunicazione broadcast √® utilizzata per inviare un messaggio a tutti i dispositivi su una rete, come nel caso di un router che invia pacchetti a tutti i dispositivi in una rete locale.
    4. Topologia
        ‚ó¶ Topologia ad albero: √® una combinazione della topologia a stella e della topologia a bus. Viene utilizzata in reti di grandi dimensioni in cui ci sono pi√π livelli di dispositivi.
        ‚ó¶ Topologia a maglia completa: ogni dispositivo √® connesso direttamente a tutti gli altri dispositivi della rete. Garantisce alta resilienza e ridondanza, ma √® costosa da implementare.
    5. Modello Client-Server
        ‚ó¶ Nel modello Client-Server, il server √® il nodo centrale che offre risorse o servizi (come file, applicazioni, database), mentre i client sono i dispositivi che accedono a queste risorse. I client inviano richieste HTTP o altre richieste di rete al server, che elabora la richiesta e restituisce una risposta. Questo modello √® usato per applicazioni web, email, e servizi di streaming.
    6. Modello Peer-to-Peer (P2P)
        ‚ó¶ In una rete P2P, i nodi sono simmetrici e tutti i dispositivi possono fungere sia da client che da server. Le risorse (file, video, ecc.) vengono distribuite direttamente tra gli utenti. I client P2P sono autonomi, il che significa che non c'√® un server centrale che gestisce le connessioni.
        ‚ó¶ Le applicazioni P2P sono particolarmente utili per sharing di file (es. BitTorrent), comunicazioni vocali e video (es. Skype), e in blockchain (dove la rete distribuisce il controllo e la gestione dei dati tra i vari nodi).
    7. Classificazione su scala geografica
        ‚ó¶ Le WAN (Wide Area Network) possono essere pubbliche (internet) o private (come le VPN aziendali). Le MAN (Metropolitan Area Network) sono utili per connettere edifici in una citt√† o universit√†, e le LAN (Local Area Network) sono utilizzate per connettere dispositivi all'interno di una singola struttura come un ufficio o una casa.

üî¢ Lezione 10: Architettura ‚Äì Gestione delle Informazioni
    1. Gestione delle informazioni
        ‚ó¶ La gestione delle informazioni riguarda anche il concetto di Database Management System (DBMS), che √® un software che gestisce la creazione, l'archiviazione e il recupero delle informazioni in un database. I DBMS si occupano di operazioni come query (ricerca), inserimento, aggiornamento e eliminazione dei dati.
    2. Codice Binario
        ‚ó¶ Oltre a essere fondamentale per la rappresentazione numerica, il codice binario viene usato in sistemi digitali, dove ogni stato (acceso o spento) √® rappresentato da 1 o 0. Le porte logiche (AND, OR, NOT) sono utilizzate per costruire circuiti elettronici che elaborano i dati in binario.
    3. Codice ASCII
        ‚ó¶ ASCII √® anche utilizzato per rappresentare simboli di controllo come il carriage return (ritorno a capo), line feed (avanzamento linea), e tabulazione. Ogni codice ASCII occupa un byte (8 bit), e i caratteri non visibili sono utilizzati per il controllo del flusso di dati nei terminali.
    4. Dimensioni dei dati
        ‚ó¶ Le dimensioni dei dati vengono misurate in bit, byte e word (parola), che rappresentano unit√† di memorizzazione in un computer. La dimensione di una parola varia a seconda dell'architettura del computer, di solito 16, 32 o 64 bit.
        ‚ó¶ Il termine bitrate si riferisce alla quantit√† di dati che possono essere trasferiti in un dato periodo di tempo (ad esempio, 10 Mbps indica 10 megabit al secondo).
    5. Propriet√† del binario
        ‚ó¶ Il sistema binario ha numerosi vantaggi per la realizzazione di circuiti elettronici, come la semplicit√† nel design di porte logiche e la facilit√† con cui possono essere rappresentati stati elettronici (on/off, 1/0).
    6. Conversione binario-decimale
        ‚ó¶ Il metodo della divisione per 2 funziona dividendo ripetutamente un numero decimale per 2 e registrando i resti, che poi vengono letti al contrario. Ad esempio, per il numero 13:
            ‚ñ™ 13 √∑ 2 = 6 resto 1
            ‚ñ™ 6 √∑ 2 = 3 resto 0
            ‚ñ™ 3 √∑ 2 = 1 resto 1
            ‚ñ™ 1 √∑ 2 = 0 resto 1 Il numero binario di 13 √® 1101.
    7. Conversione decimale-binario
        ‚ó¶ Il metodo della divisione per 2 √® simile al metodo di conversione inversa. Si divide il numero decimale per 2, annotando il resto ad ogni passaggio. Il risultato finale sar√† la rappresentazione binaria del numero.
    8. Addizione e sottrazione binaria
        ‚ó¶ Addizione binaria: simile all'addizione decimale, ma con solo 0 e 1. Quando si somma 1 + 1 si ottiene 10, quindi un carry (riporto) deve essere aggiunto al bit successivo.
        ‚ó¶ Sottrazione binaria: quando si sottrae un numero binario pi√π grande da uno pi√π piccolo, si utilizza il complemento a due, che √® un modo per rappresentare i numeri negativi in binario.
    9. Algebra Booleana
        ‚ó¶ L'algebra booleana √® essenziale nella progettazione di circuiti digitali, per ottimizzare le operazioni logiche. Le equazioni booleane possono essere semplificate usando le leggi dell'algebra booleana per costruire circuiti pi√π efficienti e risparmiare risorse.
    10. Modello di Von Neumann
    ‚Ä¢ Il modello di Von Neumann prevede che la memoria condivida lo spazio sia per i dati che per il programma in esecuzione. Questo modello ha portato all'idea dei registri di memoria e delle istruzioni di fetch per ottenere dati dalla memoria.
